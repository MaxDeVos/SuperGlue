--[[
    This is a system I made (and didn't use) to keep track of entity values (in this case, pose) throughout their life-cycle. 
    I put a lot of time into it, so I might as well keep it around. Maybe someone will get use out of it.

    To use it, include this class in the Lua file, and call printSinglePose(), printPoseChildren(), or printPoseAll()
    where you want to probe the objects, and at some point run printCSV(). This will spit out a bunch of garbage into the console
    that you can paste into excel and use as a timetable (or something, idk i'm not a business major).

    ============ Techical details of what lies below ============

	Each entry of masterTbl is a single objects life-cycle
	Each entry of an entry of masterTbl is the specific datapoint of that object at that event (called entTable here).
	Therefore:
	masterTbl[tostring(selfInstance)] = entTable 		-- shows what entTable represents
	entTable[eventIterator] = 3							-- assigning selfInstance's state at that event to 3.

	The name of the object IS the key, so no title-entry is needed.	They can be appended at print-time.

	events is a table that relates eventIterator values to event names. You could stop here and assume the datapoint entries are final.
	Should your datapoint entries contain more than one piece of information (such as a relationship, position vector, and angle vector),
	you'll want entEventTable as well, which is defined below. If not, printing should be done as follows for debugging in Excel or something.

	nil			masterTbl[a]'s key		masterTbl[b]'s key		..
	event[i]	masterTbl[a][i+1]		masterTbl[a][i+1]		..
	..			..						..						..

	entEventTable is the parts of a specific datapoint (entTable). This is used to store the different pieces of info
	for formatting at print-time.
	Therefore:
	entEventTable = entTable[eventIterator] = masterTbl[tostring(selfInstance)][eventIterator]

	In this use-case, entEventTable is divided up as follows
	entEventTable[1] = note (usually relationship such as child or self)
	entEventTable[2] = Pos vector
	entEventTable[3] = Angle vector

	To print with entEventTable, you'll use the same printing approach as above, except you'll need to format the data at
	print-time, or print multiple seperate tables, one for each type of data.
]]--

local eventIterator = 1
local masterTbl = {}
local event = {}

CreateConVar("max_tableActive", "false")

function resetTable()
	eventIterator = 1
	masterTbl = {}
	event = {}
end

function printSinglePose(state, note, ent, notEndOfEvent)
	if GetConVar("max_tableActive"):GetInt() ~= 1 then return end
	print("WRITING POSE OF " .. note .. "  " .. tostring(ent))
	local entTable = {}
	if masterTbl[tostring(ent)] then entTable = masterTbl[tostring(ent)] else entTable = {} end

	local entEventTable = {}
	if entTable[eventIterator] then entEventTable = masterTbl[eventIterator] else entEventTable = {} end

	local pos, ang
	pos, ang = formatPose(ent)

	entEventTable[1] = note
	entEventTable[2] = pos
	entEventTable[3] = ang
	print("WRITING   " .. state .. "   TO EVENT @ " .. eventIterator)
	event[eventIterator] = state

	entTable[eventIterator] = entEventTable
	masterTbl[tostring(ent)] = entTable
	if not notEndOfEvent then eventIterator = eventIterator + 1 end
end


function printPoseChildren(state, childrenTable, notEndOfEvent)
	if GetConVar("max_tableActive"):GetInt() ~= 1 then return end
	event[eventIterator] = state -- In case childrenTable is empty, we need a value here anyway
	for id, child in pairs(childrenTable) do
		printSinglePose(state, "child", child, true)
	end
	if not notEndOfEvent then eventIterator = eventIterator + 1 end
end


function printPoseAll(state, childrenTable, selfInstance, notEndOfEvent)
	if GetConVar("max_tableActive"):GetInt() ~= 1 then return end
	printSinglePose(state, "self", selfInstance, true)
	printPoseChildren(state, childrenTable, true)
	if not notEndOfEvent then eventIterator = eventIterator + 1 end
end


function printCSV()
	local eventNum = 0
	while eventNum + 1 <= eventIterator do
		local row = ","
		if eventNum > 0 then
			if event[eventNum] then
				row = event[eventNum] .. ","
			else
				print("row is fucked. eventNum = " .. tostring(eventNum + 1))
			end
		end
		for entName, entTable in pairs(masterTbl) do
			if eventNum == 0 then
				row = row .. entName .. ","
			else
				if not entTable[eventNum] then
					row = row .. ","
				else
					entString = ""
					for _, val in pairs(entTable[eventNum]) do
						entString = entString .. tostring(val) .. "|"
					end
					row = row .. entString .. ","
				end
			end
		end
		-- print(row)
		eventNum = eventNum + 1
	end
end

function formatPose(ent)
	local posVal = "null"
	local angVal = "null"

	if not ent.Pos then
		posVal = ent:GetPos()
	else
		posVal = ent.Pos
	end

	if not ent.Ang then
		angVal = ent:GetAngles()
	else
		angVal = ent.Ang
	end

	return tostring(posVal), tostring(angVal)
end